import torch
import torch.nn as nn

from timm.models.layers import trunc_normal_
import torch.nn.functional as F
import math
    
# Two-stream Extraction Alignment Module
class BasicBlock(nn.Module):
    expansion = 1

    def __init__(self, inplanes, planes, stride=1, downsample=None):
        super(BasicBlock, self).__init__()
        self.conv1 = nn.Conv2d(inplanes, planes, kernel_size=1, stride=stride,padding=0, bias=False)
        self.bn1 = nn.BatchNorm2d(planes)
        self.relu = nn.ReLU(inplace=True)
        self.conv2 = nn.Conv2d(inplanes, planes, kernel_size=3, stride=stride,padding=1, bias=False)
        self.bn2 = nn.BatchNorm2d(planes)
        self.downsample = downsample
        self.stride = stride

    def forward(self, x):
        residual = x

        out = self.conv1(x)
        out = self.bn1(out)
        out = self.relu(out)

        out = self.conv2(out)
        out = self.bn2(out)

        if self.downsample is not None:
            residual = self.downsample(x)

        out += residual
        out = self.relu(out)

        return out

class FeatureAlignment(nn.Module):
    def __init__(self, inplanes, planes, stride=1, downsample=None, reduction=1, lambda_c=.5, lambda_s=.5):
        super(FeatureAlignment, self).__init__()
        self.avg_pool = nn.AdaptiveAvgPool2d(1)
        self.conv1 = nn.Conv2d(inplanes, planes, kernel_size = 1, stride = stride, padding = 0, bias = False)
        self.conv3 = nn.Conv2d(inplanes, planes, kernel_size = 3, stride = stride, padding = 1, bias = False)
        self.sigmoid = nn.Sigmoid()
        self.basicblock = BasicBlock(inplanes = inplanes, planes = planes, stride = 1, downsample = None)
        
    def forward(self, x1, x2):
        x1 = self.basicblock(x1)
        x2 = self.basicblock(x2)
        x = x1 * x2
        x = self.sigmoid(self.conv1(self.avg_pool(x)))
        x1_S = x * x1
        x2_S = x * x2
        x1_C = self.sigmoid(self.conv3(self.avg_pool(x1_S)))
        x2_C = self.sigmoid(self.conv3(self.avg_pool(x2_S)))
        x1 = x1_C * x1
        x2 = x2_C * x2
        
        return x1, x2

# Group Pooling Complementary Module
class FeatureEnhance(nn.Module):
    def __init__(self, dim, reduction=1):
        super().__init__()
        self.conv = nn.Conv2d(dim, dim, 3, 1, 1)
        self.avg = nn.AdaptiveAvgPool2d((1, 1))
        self.max = nn.AdaptiveMaxPool2d((1, 1))
        self.maxpool = nn.MaxPool2d(3, stride=1, padding=1)
        self.avgpool = nn.AvgPool2d(3, stride=1, padding=1)
        self.sig = nn.Sigmoid()

    def forward(self, x1, x2):
        B, C, H, W = x1.shape
        output_size = (H, W)
        x_11 = self.sig(self.conv(self.avg(x1)))  # x1.shape = [B, C, H, W]
        x_21 = self.sig(self.conv(self.max(x1)))
        x_31 = self.sig(self.conv(self.avgpool(x1)))
        x_41 = self.sig(self.conv(self.maxpool(x1)))
        x_12 = self.sig(self.conv(self.avg(x2)))  # x1.shape = [B, C, H, W]
        x_22 = self.sig(self.conv(self.max(x2)))
        x_32 = self.sig(self.conv(self.avgpool(x2)))
        x_42 = self.sig(self.conv(self.maxpool(x2)))
        x_11 = x_11.mul(x_21)
        x_21 = x_31.mul(x_41)
        x_12 = x_12.mul(x_22)
        x_22 = x_32.mul(x_42)
        x1 = (x_11 + x1) * (x_12 + x2)
        x2 = (x_21 + x1) * (x_22 + x2)
        return x1, x2


class CrossAttention(nn.Module):
    def __init__(self, dim, num_heads=8, qkv_bias=False, qk_scale=None):
        super(CrossAttention, self).__init__()
        assert dim % num_heads == 0, f"dim {dim} should be divided by num_heads {num_heads}."

        self.dim = dim
        self.num_heads = num_heads
        head_dim = dim // num_heads
        self.scale = qk_scale or head_dim ** -0.5
        self.kv1 = nn.Linear(dim, dim * 2, bias=qkv_bias)
        self.kv2 = nn.Linear(dim, dim * 2, bias=qkv_bias)

    def forward(self, x1, x2):
        B, N, C = x1.shape
        q1 = x1.reshape(B, -1, self.num_heads, C // self.num_heads).permute(0, 2, 1, 3).contiguous()
        q2 = x2.reshape(B, -1, self.num_heads, C // self.num_heads).permute(0, 2, 1, 3).contiguous()
        k1, v1 = self.kv1(x1).reshape(B, -1, 2, self.num_heads, C // self.num_heads).permute(2, 0, 3, 1, 4).contiguous()
        k2, v2 = self.kv2(x2).reshape(B, -1, 2, self.num_heads, C // self.num_heads).permute(2, 0, 3, 1, 4).contiguous()

        ctx1 = (k1.transpose(-2, -1) @ v1) * self.scale
        ctx1 = ctx1.softmax(dim=-2)
        ctx2 = (k2.transpose(-2, -1) @ v2) * self.scale
        ctx2 = ctx2.softmax(dim=-2)

        x1 = (q1 @ ctx2).permute(0, 2, 1, 3).reshape(B, N, C).contiguous() 
        x2 = (q2 @ ctx1).permute(0, 2, 1, 3).reshape(B, N, C).contiguous() 

        return x1, x2


class CrossPath(nn.Module):
    def __init__(self, dim, reduction=1, num_heads=None, norm_layer=nn.LayerNorm):
        super().__init__()
        self.channel_proj1 = nn.Linear(dim, dim // reduction * 2)
        self.channel_proj2 = nn.Linear(dim, dim // reduction * 2)
        self.act1 = nn.ReLU(inplace=True)
        self.act2 = nn.ReLU(inplace=True)
        self.cross_attn = CrossAttention(dim // reduction, num_heads=num_heads)
        self.end_proj1 = nn.Linear(dim // reduction * 2, dim)
        self.end_proj2 = nn.Linear(dim // reduction * 2, dim)
        self.norm1 = norm_layer(dim)
        self.norm2 = norm_layer(dim)

    def forward(self, x1, x2):
        y1, u1 = self.act1(self.channel_proj1(x1)).chunk(2, dim=-1)
        y2, u2 = self.act2(self.channel_proj2(x2)).chunk(2, dim=-1)
        v1, v2 = self.cross_attn(u1, u2)
        y1 = torch.cat((y1, v1), dim=-1)
        y2 = torch.cat((y2, v2), dim=-1)
        out_x1 = self.norm1(x1 + self.end_proj1(y1))
        out_x2 = self.norm2(x2 + self.end_proj2(y2))
        return out_x1, out_x2



class ChannelEmbed(nn.Module):
    def __init__(self, dim, norm_layer=nn.BatchNorm2d):
        super(ChannelEmbed, self).__init__()
        self.conv1 = nn.Conv2d(dim * 2, dim, 1, 1, 0)
        self.residual = nn.Conv2d(dim * 2, dim, 3, 1, 1)
        self.avg = nn.AdaptiveAvgPool2d((1, 1))
        self.max = nn.AdaptiveMaxPool2d((1, 1))
        self.sig = nn.Sigmoid()
        self.norm = norm_layer(dim)

    def forward(self, x, H, W):
        B, N, _C = x.shape
        x = x.permute(0, 2, 1).reshape(B, _C, H, W).contiguous()

        output_size = (H, W)
        
        x_avg = self.sig(self.conv1(self.avg(x)))
        x_max = self.sig(self.conv1(self.max(x)))
        demo = x_avg + x_max
        x_residual = self.sig(self.residual(x))
        merge = self.norm(demo * x_residual)

        return merge


class FeatureFusionModule(nn.Module):
    def __init__(self, dim, reduction=1, num_heads=None, norm_layer=nn.BatchNorm2d):
        super().__init__()
        self.cross = CrossPath(dim=dim, reduction=reduction, num_heads=num_heads)
        self.channel_emb = ChannelEmbed(dim = dim)
        self.apply(self._init_weights)
        self.featurealignment = FeatureAlignment(inplanes = dim, planes = dim, stride = 1, downsample = None)
        self.featureenhance = FeatureEnhance(dim =dim)
        

    def _init_weights(self, m):
        if isinstance(m, nn.Linear):
            trunc_normal_(m.weight, std=.02)
            if isinstance(m, nn.Linear) and m.bias is not None:
                nn.init.constant_(m.bias, 0)
        elif isinstance(m, nn.LayerNorm):
            nn.init.constant_(m.bias, 0)
            nn.init.constant_(m.weight, 1.0)
        elif isinstance(m, nn.Conv2d):
            fan_out = m.kernel_size[0] * m.kernel_size[1] * m.out_channels
            fan_out //= m.groups
            m.weight.data.normal_(0, math.sqrt(2.0 / fan_out))
            if m.bias is not None:
                m.bias.data.zero_()

    def forward(self, x1, x2):
        B, C, H, W = x1.shape
        feature = self.featurealignment(x1, x2)
        x1 = feature[0]
        x2 = feature[1]
        merge_fe = self.featureenhance(x1, x2) 
        x1 = merge_fe[0].flatten(2).transpose(1, 2)
        x2 = merge_fe[1].flatten(2).transpose(1, 2)
        x1, x2 = self.cross(x1, x2)
        merge = torch.cat((x1, x2), dim=-1)
        merge = self.channel_emb(merge, H, W)
        
        return merge
